{"version":3,"sources":["webpack:///webpack/bootstrap 5099152b9939137cc900","webpack:///./lib/entry.js","webpack:///./lib/constants.js","webpack:///./lib/game.js","webpack:///./lib/brood.js","webpack:///./lib/alien.js","webpack:///./lib/util.js","webpack:///./lib/cannon.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,EAAC;;AAED;;;;;;;ACXA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACjDA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA0B,WAAW;AACrC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,iCAAgC,aAAa,UAAU,cAAc;AACrE;;AAEA;;;;;;;ACvKA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAuB;AACvB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;;AAGA;;;;;;;AC9UA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qCAAoC,4BAA4B;AAChE;AACA;;AAEA;AACA;AACA,oBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;;;;;;;ACnSA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1EA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 5099152b9939137cc900\n **/","const Constants = require(\"./constants\");\nconst Game = require(\"./game\");\n\nlet game = new Game();\n\nwindow.currentGame = game;\n\n$(\"#view-style\").click(function() {\n  window.currentGame.skeleton = !window.currentGame.skeleton;\n});\n\ngame.setup();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/entry.js\n ** module id = 0\n ** module chunks = 0\n **/","var canvas = document.getElementById(\"brood-canvas\");\n\nvar greenAlien = new Image();\ngreenAlien.src = \"assets/images/aliens/smiley_green_alien.svg\";\nvar blueAlien = new Image();\nblueAlien.src = \"assets/images/aliens/smiley_blue_alien.svg\";\nvar redAlien = new Image();\nredAlien.src = \"assets/images/aliens/smiley_red_alien.svg\";\nvar orangeAlien = new Image();\norangeAlien.src = \"assets/images/aliens/smiley_orange_alien.svg\";\nvar purpleAlien = new Image();\npurpleAlien.src = \"assets/images/aliens/smiley_purple_alien.svg\";\nlet radius = 40;\nlet spacing = radius * Math.sqrt(3) / 2;\nlet xValues = [];\n\nlet idx = 1.5 * spacing;\nwhile(idx + spacing < canvas.width) {\n  xValues.push(idx);\n  idx += (2 * spacing);\n}\n\nconst Constants = {\n  NUMROWS: 4,\n  LOSSHEIGHT: canvas.height * 0.7,\n  RADIUS: radius,\n  X_SPACING: spacing,\n  HORIZONTALS: xValues,\n  VERTICES: 6,\n  DELTA: 0.05,\n  SPEED: 15,\n  POINTS: 10,\n  RICHOCHET_POINTS: 5,\n  COLORS: [\n      \"green\",\n      \"blue\",\n      \"purple\",\n      \"red\",\n      \"orange\"\n  ],\n  TYPES: [\n    greenAlien,\n    blueAlien,\n    purpleAlien,\n    redAlien,\n    orangeAlien\n  ]\n};\n\nmodule.exports = Constants;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/constants.js\n ** module id = 1\n ** module chunks = 0\n **/","const Constants = require(\"./constants\");\nconst Brood = require(\"./brood.js\");\nconst Cannon = require(\"./cannon.js\");\n\nconst SPEED = Constants.SPEED;\nconst RADIUS = Constants.RADIUS;\n\nvar playFrame = $(\"#play\");\nlet scoreReport = document.getElementById('round-score');\nlet totalReport = document.getElementById('total-score');\nvar canvas = document.getElementById(\"brood-canvas\");\nvar ctx = canvas.getContext(\"2d\");\nvar gameInterval;\nvar totalScore = 0;\n\nlet canvasBackground = ctx.createLinearGradient(canvas.height, 0, canvas.height, canvas.width);\ncanvasBackground.addColorStop(1, \"#f44336\");\ncanvasBackground.addColorStop(0.6, \"#2196f3\");\n\nlet nightSky = ctx.createLinearGradient(canvas.height, 0, canvas.height, canvas.width);\nnightSky.addColorStop(0, \"#000\");\nnightSky.addColorStop(0.9, \"#2196f3\");\n\nconst Game = function(options) {\n  window.currentGame = this;\n  this.top = 0;\n  this.shotCount = 0;\n  this.score = 0;\n  this.topFlush = true;\n  this.brood = new Brood({game: this});\n  this.cannon = new Cannon();\n  this.skeleton = false;\n};\n\n//////// GAMEPLAY\n\nGame.prototype.step = function() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  this.drawBackground();\n  this.brood.stepAliens();\n  if(this.brood.loss) {\n    this.end(\"You lose!\");\n    totalScore = 0;\n  } else if(this.brood.win){\n    totalScore += this.score;\n    this.end(\"You win!\");\n  }\n};\n\nGame.prototype.updateScore = function() {\n  this.score += Constants.POINTS;\n  scoreReport.textContent = this.score;\n};\n\nGame.prototype.richochet = function() {\n  this.score += Constants.RICHOCHET_POINTS;\n  scoreReport.textContent = this.score;\n};\n\nGame.prototype.countShots = function() {\n  this.shotCount += 1;\n  if(this.shotCount % 15 === 0) this.resetTop();\n};\n\nGame.prototype.resetTop = function() {\n  this.top += 2 * RADIUS;\n};\n\nGame.prototype.drawBackground = function() {\n  let canvasBackground = ctx.createLinearGradient(this.top, this.top, this.top, canvas.height);\n  canvasBackground.addColorStop(1, \"#f44336\");\n  canvasBackground.addColorStop(0.6, \"#2196f3\");\n\n  let nightSky = ctx.createLinearGradient(0, this.top, 0, 0);\n  nightSky.addColorStop(1, \"#000\");\n  nightSky.addColorStop(0.01, \"#2196f3\");\n\n  ctx.fillStyle = canvasBackground;\n  if(this.skeleton) {\n    this.drawCeiling();\n  } else {\n    ctx.fillRect(0, this.top, canvas.width, canvas.height);\n    ctx.fillStyle = nightSky;\n    ctx.fillRect(0, 0, canvas.width, this.top);\n    this.drawBuildings();\n  }\n};\n\nGame.prototype.drawCeiling = function() {\n  ctx.beginPath();\n  ctx.fillStyle = \"#d3d3d3\";\n  ctx.rect(0,0,canvas.width, this.top);\n  ctx.fill();\n  ctx.closePath();\n};\n\nGame.prototype.drawBuildings = function() {\n\n};\n\n//////// START/STOP PLAY METHODS\n\nGame.prototype.setup = function() {\n  scoreReport.textContent = this.score;\n  $replay.remove();\n  gameInterval = setInterval(this.step.bind(this), 10);\n  var event = new CustomEvent('imagesLoaded');\n  var keydownEvent = document.addEventListener('keydown', this.onKeyDown.bind(this));\n  var keyupEvent = document.addEventListener('keyup', this.onKeyUp.bind(this));\n};\n\nGame.prototype.end = function(text) {\n  document.removeEventListener('keydown', this.onKeyDown.bind(this));\n  document.removeEventListener('keyup', this.onKeyUp.bind(this));\n  clearInterval(gameInterval);\n  $replay.text(`${ text } Play again?`);\n  $replay.append('<i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>');\n  $replay.on(\"click\", \".fa-refresh\", playAgain);\n  playFrame.append($replay);\n  totalReport.textContent = totalScore;\n};\n\nconst playAgain = function() {\n  let game = new Game();\n  game.setup();\n};\n\n//////// LISTENERS AND THEIR CALLBACKS\n\nGame.prototype.onKeyDown = function(e) {\n  if(e.keyCode === 39) {\n    this.cannon.direction = \"right\";\n  } else if(e.keyCode === 37) {\n    this.cannon.direction = \"left\";\n  } else if(e.keyCode === 32) {\n    e.preventDefault();\n    if(!this.cannon.spaceDown) {\n      this.countShots();\n      this.brood.stageAlien();\n    }\n    this.cannon.spaceDown = true;\n  }\n};\n\nGame.prototype.onKeyUp = function(e) {\n  this.cannon.direction = null;\n  this.cannon.spaceDown = false;\n  if(e.keyCode === 32) {\n    let alien = this.brood.stagedAliens.pop();\n    this.brood.movingAliens[alien.id] = alien;\n    this.fireCannon(this.cannon.angle, alien);\n  }\n};\n\nGame.prototype.fireCannon = function(angle, alien) {\n  alien.vel = [\n    SPEED * Math.sin(angle),\n    -SPEED * Math.cos(angle)\n  ];\n  alien.pos[1] -= this.top;\n  alien.staged = false;\n};\n\n\nconst $replay = $(`<div width=${canvas.width} height=${canvas.height} class='replay'>\n  </div>`);\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 2\n ** module chunks = 0\n **/","const Constants = require('./constants.js');\nconst Alien = require('./alien.js');\nconst Util = require('./util.js');\n\nvar canvas = document.getElementById(\"brood-canvas\");\nvar ctx = canvas.getContext(\"2d\");\n\nconst RADIUS = Constants.RADIUS;\nconst xSpacing = RADIUS * Math.sqrt(3) / 2;\nconst SPEED = Constants.SPEED;\n\nvar coolAlien = new Image();\ncoolAlien.src = \"assets/images/aliens/green/Smiley_green_alien_big_eyes.svg\";\n\nconst Brood = function(options) {\n  let stagedAlien = Alien.createAlien(\n    Constants.RADIUS * 2.5,\n    canvas.height - Constants.RADIUS * 2.5,\n    options.game,\n    true);\n  let aliens = initializeAliens(options.game);\n  this.game = options.game;\n  this.stagedAliens = [stagedAlien];\n  this.movingAliens = {};\n  this.hangingAliens = aliens;\n  this.staticAliens = {};\n  this.deadAliens = {};\n  this.shotCount = 1;\n};\n\ninitializeAliens = function(game) {\n  let xValues = Constants.HORIZONTALS;\n\n  let hash = {};\n  for(let level = 0; level < Constants.NUMROWS; level++) {\n    let height = RADIUS + level * RADIUS * (1 + Math.sin(Math.PI/6));\n    let x = xSpacing + (level % 2) * xSpacing;\n    while(x + xSpacing < canvas.width) {\n      let alien = Alien.createAlien(x, height, game, false);\n      hash[alien.id] = alien;\n      x += 2 * xSpacing;\n    }\n  }\n\n  return hash;\n};\n\nBrood.prototype.stageAlien = function(){\n  let newAlien = Alien.createAlien(\n    Constants.RADIUS * 2.5,\n    canvas.height - Constants.RADIUS * 2.5,\n    this.game,\n    true\n  );\n  this.stagedAliens[0].pos = [\n    canvas.width/2,\n    canvas.height - Constants.RADIUS\n  ];\n  this.stagedAliens.unshift(newAlien);\n  return newAlien;\n};\n\nBrood.prototype.stepAliens = function() {\n  this.moveAliens();\n  this.checkAllCollisions();\n  this.renderAliens();\n  this.game.cannon.rotate();\n  this.game.cannon.draw();\n  this.renderStagedAliens();\n  this.checkLoss();\n};\n\nBrood.prototype.moveAliens = function() {\n  for(let id in this.movingAliens){\n    let alien = this.movingAliens[id];\n    alien.move();\n  }\n};\n\nBrood.prototype.renderAliens = function() {\n  this.renderMovingAliens();\n  this.renderHangingAliens();\n  this.dropDeadAliens();\n};\n\nBrood.prototype.renderStagedAliens = function() {\n  let displayNext = this.stagedAliens[0];\n  let circleOptions = {lineWidth: 10, fillStyle: \"white\"};\n  displayNext.circle(displayNext.radius * 2, circleOptions);\n\n  for(let i in this.stagedAliens) {\n    this.stagedAliens[i].draw();\n  }\n};\n\nBrood.prototype.renderMovingAliens = function() {\n  for(let id in this.movingAliens) {\n    this.movingAliens[id].draw();\n  }\n};\n\nBrood.prototype.renderHangingAliens = function() {\n  for(let id in this.hangingAliens) {\n    this.hangingAliens[id].draw();\n  }\n};\n\nBrood.prototype.dropDeadAliens = function() {\n  for(let id in this.deadAliens) {\n    this.deadAliens[id].dropAlien();\n  }\n};\n\nBrood.prototype.checkAllCollisions = function() {\n  for(let id in this.movingAliens) {\n    this.checkAlienCollisions(this.movingAliens[id]);\n  }\n};\n\nBrood.prototype.checkAlienCollisions = function(alien) {\n  for(let id in this.hangingAliens) {\n    if(alien.collidingWith(this.hangingAliens[id])) {\n      let angle = this.findAngle(alien, this.hangingAliens[id]);\n      alien.setPosition(this.hangingAliens[id], angle);\n      this.stop(alien);\n      this.markKills(alien);\n    }\n  }\n};\n\nBrood.prototype.findAngle = function(alien, otherAlien) {\n  let angle = alien.angleWith(otherAlien);\n  let angles = Alien.sortedAngles(angle);\n\n  for(let i = 0; i < angles.length; i++) {\n    if(!this.isOccupied(alien, angles[i])){\n      angle = angles[i];\n      break;\n    }\n  }\n  return angle;\n};\n\n// Test positions at different angles around an alien\nBrood.prototype.isOccupied = function(alien, angle) {\n  let pos = [\n    alien.pos[0] + 2 * RADIUS * Math.cos(angle),\n    alien.pos[1] + 2 * RADIUS * Math.sin(angle)\n  ];\n\n  for(let i in this.hangingAliens) {\n    if(Util.inRange(pos, this.hangingAliens[i].pos)){\n      return true;\n    }\n  }\n\n  return false;\n};\n\n// Test if a specific location is occupied\nBrood.prototype.alienAt = function(pos) {\n  for(let i in this.hangingAliens) {\n    if(this.hangingAliens[i].alive &&\n      Util.inRange(pos, this.hangingAliens[i].pos)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n// Set velocity to zero and move from moving to static hash\nBrood.prototype.stop = function(alien){\n  alien.stop();\n  delete this.movingAliens[alien.id];\n  this.hangingAliens[alien.id] = alien;\n};\n\n////////// UTILITY FUNCTIONS\n\nconst addNewNodes = function(oldNodes, newNodes) {\n  newNodes.forEach(function(node) {\n    if(!oldNodes.includes(node)) oldNodes.push(node);\n  });\n};\n\n////////////// KILL FUNCTIONS\n\nBrood.prototype.markKills = function(alien) {\n  let neighbors = this.getSimilarCluster(alien);\n  // console.log(neighbors);\n  if(neighbors.length > 2){\n    this.killAliens(neighbors);\n    this.killUnattached();\n    this.checkWin();\n  }\n};\n\nBrood.prototype.killUnattached = function() {\n  let attached = this.getAttached();\n  for(let i in this.hangingAliens) {\n    let alien = this.hangingAliens[i];\n    if( !attached.includes(alien) &&\n        !alien.staged\n    ) alien.kill();\n  }\n};\n\nBrood.prototype.killAliens = function(enemies) {\n  enemies.forEach(function(enemy) {\n    enemy.kill();\n  });\n};\n\n//// GAME CHECK FUNCTIONS\n\nBrood.prototype.livingAliens = function() {\n  // for(let i in this.hangingAliens) {\n  //   if(this.hangingAliens[i].alive) return true;\n  // }\n  //\n  // return false;\n\n  return Object.keys(this.hangingAliens).length === 0 ? false : true;\n};\n\nBrood.prototype.checkWin = function() {\n  if(!this.livingAliens()) this.win = true;\n};\n\nBrood.prototype.checkLoss = function() {\n  for(let i in this.hangingAliens) {\n    let alien = this.hangingAliens[i];\n    if(alien.pos[1] + this.game.top > Constants.LOSSHEIGHT) {\n      this.loss = true;\n    }\n  }\n\n};\n\n////// NEIGHBOR CHECK FUNCTIONS\n\nBrood.prototype.hangingPositions = function() {\n  let result = [];\n  for(let i in this.hangingAliens) {\n    result.push(this.hangingAliens[i].pos);\n  }\n  return result;\n};\n\nBrood.prototype.getTopRow = function() {\n  let result = [];\n  for(let i in this.hangingAliens) {\n    let alien = this.hangingAliens[i];\n    if(alien.pos[1] === RADIUS &&\n\n    // if(alien.pos[1] === (alien.game.top + RADIUS) &&\n      alien.alive) {\n      result.push(alien);\n    }\n  }\n\n  return result;\n};\n\nBrood.prototype.getAttached = function() {\n  let topAliens = this.getTopRow();\n  let attached = [];\n\n  topAliens.forEach(function(alien) {\n    if(attached.includes(alien)) return;\n    let cluster = this.getFullCluster(alien);\n    addNewNodes(attached, cluster);\n  }.bind(this));\n  return attached;\n};\n\nBrood.prototype.getSimilarNeighbors = function(alien) {\n  let similarNeighbors = [];\n\n  for(let i in this.hangingAliens) {\n    let otherAlien = this.hangingAliens[i];\n    if(alien.neighboring(otherAlien) &&\n      alien.type === otherAlien.type\n    ) {\n      similarNeighbors.push(otherAlien);\n    }\n  }\n\n  return similarNeighbors;\n};\n\nBrood.prototype.getSimilarCluster = function(alien, nodeList) {\n  nodeList = nodeList || [];\n  if(!nodeList.includes(alien)) nodeList.push(alien);\n\n  this.getSimilarNeighbors(alien).forEach(function(neighbor) {\n    if(!nodeList.includes(neighbor)) {\n      let newList = this.getSimilarCluster(neighbor, nodeList);\n      return addNewNodes(nodeList, newList);\n    }\n  }.bind(this));\n\n  return nodeList;\n};\n\nBrood.prototype.getAllNeighbors = function(alien) {\n  let allNeighbors = [];\n\n  for(let i in this.hangingAliens) {\n    let otherAlien = this.hangingAliens[i];\n    if(alien.neighboring(otherAlien)) {\n      allNeighbors.push(otherAlien);\n    }\n  }\n\n  return allNeighbors;\n};\n\nBrood.prototype.getFullCluster = function(alien, nodeList) {\n  nodeList = nodeList || [];\n  if(!nodeList.includes(alien)) nodeList.push(alien);\n\n  this.getAllNeighbors(alien).forEach(function(neighbor) {\n    if(!nodeList.includes(neighbor) && neighbor.alive) {\n      let newList = this.getFullCluster(neighbor, nodeList);\n      return addNewNodes(nodeList, newList);\n    }\n  }.bind(this));\n\n  return nodeList;\n};\n\n\nmodule.exports = Brood;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/brood.js\n ** module id = 3\n ** module chunks = 0\n **/","const Constants = require('./constants.js');\nconst Util = require('./util.js');\nconst Game = require('./game.js');\nvar canvas = document.getElementById(\"brood-canvas\");\nvar ctx = canvas.getContext(\"2d\");\n\nconst RADIUS = Constants.RADIUS;\nconst SPEED = Constants.SPEED;\nconst XSPACE = Constants.X_SPACING;\n\nvar nextId = 1;\nconst Alien = function(options) {\n  this.color = options.color;\n  this.type = options.type;\n  this.radius = options.radius;\n  this.pos = options.pos;\n  this.vel = options.vel;\n  this.alive = true;\n  this.staged = options.staged;\n  this.game = options.game;\n  this.id = nextId++;\n};\n\nAlien.createAlien = function(x, y, game, staged) {\n  let typeColor = Util.randomTypeColor();\n  let options = {\n    pos: [x, y],\n    vel: [0, 0],\n    type: typeColor[0],\n    color: typeColor[1],\n    radius: RADIUS,\n    staged: staged,\n    alive: true,\n    game: game\n  };\n  return new Alien(options);\n};\n\n// INSTANCE METHODS\nAlien.prototype.polygon = function(radius, options) {\n  if (options.sides < 3) return;\n  var a = (Math.PI * 2)/options.sides;\n  a = options.anticlockwise ? -a : a;\n  ctx.beginPath();\n  ctx.save();\n  ctx.translate(this.pos[0], this.pos[1]);\n  ctx.rotate(Math.PI / 2);\n  ctx.moveTo(radius,0);\n  for (var i = 1; i <= options.sides; i++) {\n    ctx.lineTo(radius * Math.cos(a * i), radius * Math.sin(a * i));\n  }\n  ctx.lineWidth = options.lineWidth || 1;\n  ctx.strokeStyle = this.color;\n  ctx.stroke();\n  ctx.closePath();\n  ctx.restore();\n  ctx.closePath();\n};\n\nAlien.prototype.circle = function(radius, options) {\n  ctx.beginPath();\n  ctx.save();\n  ctx.translate(this.pos[0], this.pos[1]);\n  ctx.arc(0, 0, radius, 0, 2 * Math.PI, false);\n  ctx.strokeStyle = options.color || \"black\";\n  ctx.lineWidth = options.lineWidth || 1;\n  if(options.fillStyle) {\n    ctx.fillStyle = options.fillStyle;\n    ctx.fill();\n  }\n  ctx.stroke();\n  ctx.closePath();\n  ctx.restore();\n  ctx.closePath();\n};\n\nAlien.prototype.draw = function() {\n  if(this.game.skeleton) {\n    let options = {\n      color: this.color,\n      lineWidth: 4,\n      sides: 6\n    };\n    this.polygon(this.radius, options);\n    this.circle(Constants.X_SPACING, options);\n  } else {\n    // ctx.translate(-this.radius, -this.radius);\n    let scalingFactor = 1.5,\n    canvasX = this.pos[0]-this.radius / scalingFactor,\n    canvasY = this.pos[1]-this.radius,\n    stretchX = scalingFactor * this.radius,\n    stretchY = 1.25 * scalingFactor * this.radius;\n    if(!this.game.brood.stagedAliens.includes(this)) {\n      canvasY += this.game.top;\n    }\n\n    ctx.drawImage(\n      this.type,\n      canvasX,\n      canvasY,\n      stretchX,\n      stretchY\n    );\n  }\n\n  // ctx.translate(this.radius, this.radius);\n};\n\nAlien.prototype.dropAlien = function() {\n  if(this.pos[1] - RADIUS < canvas.height){\n    this.pos = [this.pos[0] + this.vel[0], this.pos[1] + this.vel[1]];\n    this.draw();\n  }\n};\n\nAlien.prototype.move = function() {\n  if(!this.alive) return;\n  let newX = (this.pos[0] + this.vel[0]);\n  let newY = (this.pos[1] + this.vel[1]);\n\n  if(!this.bounded(newX)) {\n    newX -= this.vel[0] * 2;\n    this.vel[0] *= -1;\n    this.game.richochet();\n  }\n\n  if(newY - this.radius < 0){\n    [newX, newY] = this.fixToCeiling(newX);\n  }\n\n  this.pos = [newX, newY];\n};\n\nAlien.prototype.bounded = function(x) {\n  let leftBound = x - RADIUS;\n  let rightBound = x + RADIUS;\n  if(rightBound > canvas.width || leftBound < 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nAlien.prototype.fixToCeiling = function(x) {\n  this.game.brood.stop(this);\n  let newX = Util.closestX(x);\n  let newY = RADIUS;\n  return([newX, newY]);\n};\n\nAlien.prototype.checkPosition = function([x, y]) {\n  while(this.game.brood.alienAt([ x, y])) {\n    let direction = Math.sign(this.pos[0] - x);\n    x += 2 * XSPACE;// * direction;\n  }\n  return [x, y];\n};\n\nAlien.prototype.setPosition = function(alien, angle) {\n  let radius = this.radius * Math.sqrt(3);\n  let x = alien.pos[0] + radius * Math.cos(angle);\n  let y = alien.pos[1] + radius * Math.sin(angle);\n  this.pos = [x, y];\n};\n\nAlien.prototype.kill = function() {\n  // debugger\n  this.alive = false;\n  this.vel[1] = SPEED/2;\n  delete this.game.brood.hangingAliens[this.id];\n  this.game.brood.deadAliens[this.id] = this;\n  this.game.updateScore();\n};\n\nAlien.prototype.neighboring = function(neighbor) {\n  res =(\n    this !== neighbor &&\n    this.touches(neighbor) &&\n    neighbor.alive\n  );\n  return res;\n};\n\nAlien.prototype.touches = function(otherAlien) {\n  res = Alien.hexCompare(\n    this.pos,\n    otherAlien.pos,\n    2 * this.radius,\n    Math.PI / 4\n  );\n  return res;\n};\n\nAlien.prototype.stop = function() {\n  this.vel = [0,0];\n};\n\nconst VERTICES = Constants.VERTICES;\n\nconst ANGLES = [];\nconst getAngles = function(){\n  for(let i = 0; i < VERTICES; i++) {\n    let angle = (i * Math.PI / 3 - Math.PI);\n    ANGLES.push(angle);\n  }\n};\ngetAngles();\n\nAlien.prototype.getVertices = function() {\n  return [\n    [this.pos[0], this.pos[1] + RADIUS],\n    [this.pos[0], this.pos[1] - RADIUS],\n    [this.pos[0] + RADIUS * Math.cos(Math.PI/6), this.pos[1] + RADIUS * Math.sin(Math.PI/6)],\n    [this.pos[0] + RADIUS * Math.cos(Math.PI/6), this.pos[1] - RADIUS * Math.sin(Math.PI/6)],\n    [this.pos[0] - RADIUS * Math.cos(Math.PI/6), this.pos[1] + RADIUS * Math.sin(Math.PI/6)],\n    [this.pos[0] - RADIUS * Math.cos(Math.PI/6), this.pos[1] - RADIUS * Math.sin(Math.PI/6)],\n  ];\n};\n\nAlien.prototype.inHexagon = function(pos) {\n  let [x, y] = this.pos;\n  let [a, b] = pos;\n  let radius = this.radius;\n\n  let res = (\n    x <= a + radius * Math.cos(Math.PI/6) &&\n    x >= a - radius * Math.cos(Math.PI/6) &&\n    y - (b + radius) <= (x - a) * Math.tan(Math.PI/6) &&\n    y - (b - radius) >= (x - a) * Math.tan(Math.PI/6) &&\n    y - (b + radius) <= -(x - a) * Math.tan(Math.PI/6) &&\n    y - (b - radius) >= -(x - a) * Math.tan(Math.PI/6)\n  );\n  return res;\n};\n\nAlien.hexCompare = function(posA, posB, radius, angle = 0) {\n  let [x, y] = posA;\n  let [a, b] = posB;\n\n  let res = (\n    y <= b + radius * Math.cos(Math.PI/6) &&\n    y >= b - radius * Math.cos(Math.PI/6) &&\n    x - (a + radius) <= (y - b) * Math.tan(Math.PI/6) &&\n    x - (a - radius) >= (y - b) * Math.tan(Math.PI/6) &&\n    x - (a + radius) <= -(y - b) * Math.tan(Math.PI/6) &&\n    x - (a - radius) >= -(y - b) * Math.tan(Math.PI/6)\n  );\n  return res;\n};\n\n// Called from perspective of moving alien\nAlien.prototype.angleWith = function(otherAlien) {\n  let y = this.pos[1] - otherAlien.pos[1];\n  let x = this.pos[0] - otherAlien.pos[0];\n  let angle = Math.atan2(y,x);\n  // console.log(`impact angle is ${angle * 360 / (2 * Math.PI)}`);\n  return angle;\n};\n\nAlien.prototype.collidingWith = function(otherAlien) {\n  // let vertices = this.getVertices();\n  // for(let i = 0; i < vertices.length; i++) {\n  //   if(otherAlien.inHexagon(vertices[i])){\n  //     return true;\n  //   }\n  // }\n  // return false;\n  let potentialPos = [\n    this.pos[0] + this.vel[0],\n    this.pos[1] + this.vel[1]\n  ];\n  let distance = Util.dist(potentialPos, otherAlien.pos);\n  return(distance < this.radius);\n\n};\n\n// MAYBE A UTILITY? Returns sorted copy of ANGLES by their difference with input angle\nAlien.sortedAngles = function(angle) {\n  let angles = ANGLES.slice();\n  angles = angles.sort(function(a, b) {\n    if(Math.abs(a - angle) < Math.abs(b - angle)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return angles;\n};\n\n//////////////////////////////\n\nmodule.exports = Alien;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/alien.js\n ** module id = 4\n ** module chunks = 0\n **/","const Constants = require('./constants');\nconst RADIUS = Constants.RADIUS;\nconst COLORS = Constants.COLORS;\nconst HORIZONTALS = Constants.HORIZONTALS;\n\nmodule.exports = {\n  randomColor: function() {\n    return COLORS[Math.floor(Math.random() * COLORS.length)];\n  },\n\n  randomType: function() {\n    return Constants.TYPES[Math.floor(Math.random() * Constants.TYPES.length)];\n  },\n\n  randomTypeColor: function() {\n    let index = Math.floor(Math.random() * Constants.TYPES.length);\n    return([Constants.TYPES[index], Constants.COLORS[index]]);\n  },\n\n  randomVelocity: function() {\n    let x = Math.random() * 2 - 1;\n    let y = Math.random() * 2 - 1;\n    let speed = Math.random();\n    x = x / Math.sqrt(x * x + y * y);\n    y = y / Math.sqrt(x * x + y * y);\n    return [x, y];\n  },\n\n  getVelocity: function(vector){\n    let x = vector[0];\n    let y = vector[1];\n    let result = [\n      x/Math.sqrt(x * x + y * y),\n      y/Math.sqrt(x * x + y * y)\n    ];\n    return result;\n  },\n\n  closestX: function(x) {\n    let res = 0;\n    for(let i in HORIZONTALS) {\n      // debugger\n      if(Math.abs(HORIZONTALS[i] - x) < Math.abs(x - res)){\n        res = HORIZONTALS[i];\n      }\n    }\n    return res;\n  },\n\n  xDist: function(first, second) {\n    return Math.abs(first[0] - second[0]);\n  },\n\n  yDist: function(first, second) {\n    return Math.abs(first[1] - second[1]);\n  },\n\n  dist: function(posA, posB) {\n    return Math.sqrt(\n      this.xDist(posA, posB) * this.xDist(posA, posB) +\n      this.yDist(posA, posB) * this.yDist(posA, posB)\n    );\n  },\n\n  onCanvas: function(pos) {\n    return ( pos[0] > 0 || pos[0] < canvas.width ? true : false);\n  },\n\n  inRange: function(posA, posB) {\n    return (\n      this.xDist(posA, posB) < Constants.RADIUS * 0.01 &&\n      this.yDist(posA, posB) < Constants.RADIUS * 0.01\n    );\n  }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util.js\n ** module id = 5\n ** module chunks = 0\n **/","const Constants = require('./constants.js');\nconst Brood = require(\"./brood.js\");\nconst Game = require(\"./game.js\");\n\nconst canvas = document.getElementById(\"brood-canvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst cannon = new Image();\ncannon.src = 'assets/images/cannon_straight.png';\nlet cannonHeight;\nlet cannonWidth;\ncannon.onload = function() {\n  cannonWidth = cannon.width;\n  cannonHeight = cannon.height;\n  // debugger\n}.bind(this);\n\nlet DELTA = Constants.DELTA;\nlet RADIUS = Constants.RADIUS;\n// debugger\nconst Cannon = function() {\n  this.color = \"#d3d3d3\";\n  this.length = canvas.height/5;\n  this.width = RADIUS * 2.5;\n  this.angle = 0;\n  this.spaceDown = false;\n  this.stagedAlien = null;\n  this.direction = null;\n};\n\nconst drawCannon = function() {\n  ctx.translate(canvas.width/2, canvas.height);\n  ctx.translate(-canvas.width/2, -canvas.height);\n};\n\nCannon.prototype.draw = function() {\n  let cannonLength = RADIUS * 3;\n  let cannonWidth = RADIUS * 3;\n  ctx.translate(canvas.width/2, canvas.height - RADIUS);\n  ctx.rotate(-Math.PI/2 + this.angle);\n  ctx.translate(0, -cannonWidth);\n  ctx.drawImage(cannon, 0, 0, cannonLength, 2 * cannonWidth);\n  ctx.translate(0, cannonWidth);\n  ctx.rotate(Math.PI/2 - this.angle);\n  ctx.translate(-canvas.width/2, -canvas.height + RADIUS);\n\n\n  ctx.translate(canvas.width/2, canvas.height);\n  ctx.beginPath();\n  ctx.arc(0, -RADIUS, RADIUS*1.5, 0, Math.PI, true);\n  ctx.rect(-1.5 * RADIUS, -RADIUS, RADIUS * 3, RADIUS);\n  ctx.fillStyle = '#3a3a3a';\n  ctx.fill();\n  ctx.closePath();\n  ctx.translate(-canvas.width/2, -canvas.height);\n\n};\n\nCannon.prototype.rotate = function() {\n  if(this.direction === \"right\" &&\n    this.angle < 5*Math.PI/12\n  ) {\n    this.angle += DELTA;\n  }\n  if(this.direction === \"left\" &&\n    this.angle > - 5*Math.PI/12\n) {\n    this.angle -= DELTA;\n  }\n};\n\nmodule.exports = Cannon;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/cannon.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}