{"version":3,"sources":["webpack:///webpack/bootstrap 359faaca14f2436482c6","webpack:///./lib/brood.js","webpack:///./lib/alien.js","webpack:///./lib/cannon.js","webpack:///./lib/constants.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACtBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAoB,WAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAgB,qBAAqB;AACrC,mBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA,4CAA2C,MAAM;AACjD;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAuC;AACvC,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;AC3YA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 359faaca14f2436482c6\n **/","const Constants = require(\"./constants\");\nconst Alien = require(\"./alien.js\");\nconst Cannon = require(\"./cannon.js\");\n\nvar canvas = document.getElementById(\"brood-canvas\");\nvar ctx = canvas.getContext(\"2d\");\nlet cannon = new Cannon();\n\nconst step = function() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  Alien.render();\n  cannon.rotate();\n  cannon.draw();\n};\n\nAlien.initializeAliens();\nsetInterval(step.bind(this), 10);\n\nlet event = new CustomEvent('imagesLoaded');\nwindow.Alien = Alien;\n// document.body.addEventListener('click', alert(\"images loaded!\"));\ndocument.addEventListener('keydown', cannon.onKeyDown.bind(cannon));\ndocument.addEventListener('keyup', cannon.onKeyUp.bind(cannon));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/brood.js\n ** module id = 0\n ** module chunks = 0\n **/","const Constants = require('./constants.js');\nvar canvas = document.getElementById(\"brood-canvas\");\nlet scoreReport = document.getElementById('player-score');\nvar ctx = canvas.getContext(\"2d\");\n\nconst RADIUS = Constants.RADIUS;\nconst SPEED = Constants.SPEED;\nvar shotCount = 0;\nvar score = 0;\nvar aliens = [];\nvar topFlush = true;\nvar top = 0;\n\nconst COLORS = [\n    \"blue\",\n    \"red\",\n    \"yellow\"\n];\n\nconst randomColor = function() {\n  return COLORS[Math.floor(Math.random() * 3)];\n};\n\nconst randomVelocity = function() {\n  let x = Math.random() * 2 - 1;\n  let y = Math.random() * 2 - 1;\n  let speed = Math.random();\n  x = x / Math.sqrt(x * x + y * y);\n  y = y / Math.sqrt(x * x + y * y);\n  return [x, y];\n};\n\nconst getVelocity = function(vector){\n  let x = vector[0];\n  let y = vector[1];\n  let result = [\n    x/Math.sqrt(x * x + y * y),\n    y/Math.sqrt(x * x + y * y)\n  ];\n  return result;\n};\n\n\nconst Alien = function(options) {\n  this.color = options.color;\n  this.radius = options.radius;\n  this.pos = options.pos;\n  this.vel = options.vel;\n  this.alive = true;\n  this.staged = options.staged;\n};\n\n// CLASS METHODS\n\nAlien.drawCeiling = function() {\n  ctx.beginPath();\n  ctx.fillStyle = \"#d3d3d3\";\n  ctx.rect(0,0,canvas.width, top);\n  ctx.fill();\n  ctx.closePath();\n};\n\nAlien.initializeAliens = function() {\n  for(let level = 0; level < 5; level++){\n    let pos = RADIUS + (level % 2) * RADIUS;\n    while(pos < canvas.width) {\n      let height = RADIUS + level * 2 * RADIUS;\n      let options = {\n        pos: [pos, height],\n        vel: [0,0],\n        color: randomColor(),\n        radius: RADIUS,\n        staged: false\n      };\n\n      aliens.push(new Alien(options));\n      pos += 2 * RADIUS;\n    }\n  }\n};\n\nAlien.collide = function() {\n  for(let i = 0; i < (aliens.length); i++) {\n    for(let j = 0; j < (aliens.length); j++) {\n      if(i != j && aliens[i].alive && aliens[j].alive){\n        if (aliens[i].checkCollision(aliens[j])){\n          aliens[i].lock(aliens[j]);\n          aliens[i].markKills();\n        }\n      }\n    }\n  }\n};\n\nconst addNewNodes = function(oldNodes, newNodes) {\n  newNodes.forEach(function(node) {\n    if(!oldNodes.includes(node)) oldNodes.push(node);\n  });\n};\n\nconst xDist = function(first, second) {\n  return Math.abs(first.pos[0] - second.pos[0]);\n};\n\nconst yDist = function(first, second) {\n  return Math.abs(first.pos[1] - second.pos[1]);\n};\n\nconst onCanvas = function(pos) {\n  return ( pos[0] > 0 || pos[0] < canvas.width ? true : false);\n};\n\nconst killAliens = function(enemies) {\n  enemies.forEach(function(enemy) {\n    enemy.alive = false;\n    score += Constants.POINTS;\n  });\n  updateScore();\n};\n\nconst updateScore = function() {\n  scoreReport.textContent = `Your score: ${score}`;\n};\n\nconst spaceOccupied = function(pos) {\n  aliens.forEach(function(alien) {\n    if(alien.pos === pos && alien.alive) return true;\n  });\n  return false;\n};\n\nconst getTopRow = function() {\n  let topRow = aliens.reduce(function(result, alien) {\n    // debugger\n    if(alien.pos[1] === (top + RADIUS) &&\n      alien.alive) {\n      result.push(alien);\n    }\n    return result;\n  }, []);\n  // debugger\n  return topRow;\n};\n\n\nconst resetTop = function() {\n  top += 2 * RADIUS;\n  aliens.forEach(function(alien){\n    alien.pos[1] += 2* RADIUS;\n  });\n};\n\nconst countShots = function() {\n  shotCount += 1;\n\n  if(shotCount % 10 === 0) resetTop();\n};\n\nAlien.render = function() {\n  Alien.moveAliens();\n  Alien.collide();\n  Alien.drawCeiling();\n};\n\nAlien.livingAliens = function() {\n  let living = aliens.reduce(function(result, alien) {\n    if(alien.alive) result.push(alien); return result;\n  }, []);\n  return living;\n};\n\nAlien.killUnattached = function() {\n  let attached = Alien.getAttached();\n  aliens.forEach(function(alien){\n    if(\n      !attached.includes(alien) &&\n      !alien.staged &&\n      !alien.isMoving()\n    ) alien.alive = false;\n  });\n};\n\nAlien.moveAliens = function() {\n  aliens.forEach(function(invader) {\n    invader.move();\n  });\n};\n\nconst livingAliens = function() {\n  for(let i in aliens) {\n    if(aliens[i].alive) return true;\n  }\n  return false;\n};\n\nconst checkWin = function() {\n  if(!livingAliens()) alert(\"You win!\");\n};\n\nAlien.stageAlien = function(){\n  let options = {\n    pos: [canvas.width/2, canvas.height],\n    vel: [0, 0],\n    color: randomColor(),\n    radius: RADIUS,\n    staged: true\n  };\n\n  let newAlien = new Alien(options);\n  aliens.push(newAlien);\n  return newAlien;\n};\n\nAlien.fireCannon = function(angle, alien) {\n  alien.vel = [\n    SPEED * Math.sin(angle),\n    -SPEED * Math.cos(angle)\n  ];\n  alien.staged = false;\n  countShots();\n};\n\n// INSTANCE METHODS\n\nAlien.prototype.draw = function() {\n  ctx.fillStyle = this.color;\n  ctx.beginPath();\n  ctx.arc(this.pos[0], this.pos[1], this.radius, 0, Math.PI*2);\n  ctx.fill();\n  ctx.closePath();\n};\n\nAlien.prototype.move = function() {\n  if(!this.alive) return;\n  let newX = (this.pos[0] + this.vel[0]);\n  let newY = (this.pos[1] + this.vel[1]);\n\n  if(!this.bounded(newX)) {\n    newX -= this.vel[0] * 2;\n    this.vel[0] *= -1;\n  }\n\n  if(newY < top){\n    [newX, newY] = this.fixToCeiling(newX);\n  }\n\n  this.pos = [newX, newY];\n  this.draw();\n};\n\nAlien.prototype.bounded = function(x) {\n  let leftBound = x - RADIUS;\n  let rightBound = x + RADIUS;\n  if(rightBound > canvas.width || leftBound < 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nAlien.prototype.fixToCeiling = function(x) {\n  this.stop();\n  const DIAM = 2 * RADIUS;\n  let xOffset = topFlush ? 0 : RADIUS;\n  let effectiveX = x - xOffset;\n  let xBound = DIAM * Math.round((effectiveX)/(DIAM));\n  let newY = top + RADIUS;\n  let newX = RADIUS + xBound;\n  return [newX, newY];\n};\n\n\nAlien.prototype.isMoving = function() {\n  if(this.vel[0] !== 0 || this.vel[1] !== 0) return true;\n  return false;\n};\n\nAlien.prototype.stop = function() {\n  this.vel = [0,0];\n};\n\nAlien.prototype.getSimilarNeighbors = function() {\n  let similarNeighbors = [];\n  for(let j = 0; j < (aliens.length); j++) {\n    if(this.neighboring(aliens[j]) &&\n      this.color === aliens[j].color\n    ) {\n      similarNeighbors.push(aliens[j]);\n    }\n  }\n  return similarNeighbors;\n};\n\nAlien.prototype.getAllNeighbors = function() {\n  let allNeighbors = [];\n  for(let j = 0; j < (aliens.length); j++) {\n    if(this.neighboring(aliens[j])) {\n      allNeighbors.push(aliens[j]);\n    }\n  }\n  return allNeighbors;\n};\n\nAlien.prototype.neighboring = function(neighbor) {\n  if(\n    this !== neighbor &&\n    xDist(this, neighbor) <= RADIUS * 2 &&\n    yDist(this, neighbor) <= RADIUS * 2 &&\n    neighbor.alive\n  ) {\n    return true;\n  } else{\n    return false;\n  }\n};\n\nAlien.prototype.getSimilarCluster = function(nodeList) {\n  nodeList = nodeList || [];\n  if(!nodeList.includes(this)) nodeList.push(this);\n\n  this.getSimilarNeighbors().forEach(function(neighbor) {\n    if(!nodeList.includes(neighbor)) {\n      let newList = neighbor.getSimilarCluster(nodeList);\n      return addNewNodes(nodeList, newList);\n    }\n  });\n\n  return nodeList;\n};\n\nAlien.prototype.getFullCluster = function(nodeList) {\n  nodeList = nodeList || [];\n  if(!nodeList.includes(this)) nodeList.push(this);\n\n  this.getAllNeighbors().forEach(function(neighbor) {\n    if(!nodeList.includes(neighbor) && neighbor.alive) {\n      let newList = neighbor.getFullCluster(nodeList);\n      return addNewNodes(nodeList, newList);\n    }\n  });\n\n  return nodeList;\n};\n\nAlien.getAttached = function() {\n  let topAliens = getTopRow();\n  let attached = [];\n  topAliens.forEach(function(alien) {\n    if(attached.includes(alien)) return;\n    let cluster = alien.getFullCluster();\n    addNewNodes(attached, cluster);\n  });\n  return attached;\n};\n\nAlien.prototype.lock = function(otherAlien) {\n  let pos = [];\n  let x_dist = Math.abs(this.pos[0] - otherAlien.pos[0]);\n  let y_dist = Math.abs(this.pos[1] - otherAlien.pos[1]);\n  let maj_axis = y_dist > x_dist ? 0 : 1;\n  let min_axis = y_dist > x_dist ? 1 : 0;\n  axial_dist = Math.abs(this.pos[maj_axis] - otherAlien.pos[maj_axis]);\n\n  pos[1] = otherAlien.pos[1];\n  let x_offset = (this.pos[0] > otherAlien.pos[0]) ? 2 * RADIUS : -2 * RADIUS;\n  pos[0] = otherAlien.pos[0] + x_offset;\n\n  if(maj_axis === 0 || !spaceOccupied(pos)) {\n    pos[1] = otherAlien.pos[1] + 2 * RADIUS;\n    let x_offset = (this.pos[0] > otherAlien.pos[0]) ? RADIUS : -RADIUS;\n    pos[0] = otherAlien.pos[0] + x_offset;\n    if(!onCanvas(pos)) pos[0] += 2 * x_offset;\n  }\n  this.pos = pos;\n  this.stop();\n};\n\nAlien.prototype.markKills = function() {\n  let neighbors = this.getSimilarCluster();\n  if(neighbors.length >2){\n    killAliens(neighbors);\n    Alien.killUnattached();\n    checkWin();\n  }\n};\n\nAlien.prototype.checkCollision = function (otherAlien) {\n  let x_dist = xDist(this, otherAlien);\n  let y_dist = yDist(this, otherAlien);\n  if (x_dist <= RADIUS * 2 && y_dist <= RADIUS * 2) {\n    return this.isMoving() ? true : false;\n  }\n};\n\n\nmodule.exports = Alien;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/alien.js\n ** module id = 1\n ** module chunks = 0\n **/","const Constants = require('./constants.js');\nconst Alien = require(\"./alien.js\");\n\nconst canvas = document.getElementById(\"brood-canvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst img = new Image();\nimg.src = '../assets/images/cannon.png';\nlet DELTA = Constants.DELTA;\nlet RADIUS = Constants.RADIUS;\n\nconst Cannon = function() {\n  this.color = \"#d3d3d3\";\n  this.length = canvas.height/5;\n  this.width = RADIUS * 2.5;\n  this.angle = 0;\n  this.spaceDown = false;\n  this.stagedAlien = null;\n};\n\nconst drawCannon = function() {\n  ctx.translate(canvas.width/2, canvas.height);\n  ctx.translate(-canvas.width/2, -canvas.height);\n};\n\nCannon.prototype.draw = function() {\n\n  ctx.translate(canvas.width/2, canvas.height);\n  ctx.rotate(this.angle);\n  ctx.fillStyle = this.color;\n\n  ctx.beginPath();\n  ctx.rect(-this.width/2, -this.length * 3 / 2, this.width, this.length);\n  ctx.fill();\n  ctx.closePath();\n\n  ctx.beginPath();\n  ctx.arc(0, 0, this.length/2, 0, 2 * Math.PI, false);\n  ctx.strokeStyle = this.color;\n  ctx.lineWidth = 10;\n  ctx.stroke();\n  ctx.closePath();\n\n  ctx.rotate(-this.angle);\n  ctx.translate(-canvas.width/2, -canvas.height);\n\n};\n\nCannon.prototype.onKeyDown = function(e) {\n\n  if(e.keyCode === 39) {\n    this.direction = \"right\";\n  }\n  if(e.keyCode === 37) {\n    this.direction = \"left\";\n  }\n  if(e.keyCode === 32) {\n    e.preventDefault();\n    if(!this.spaceDown) {\n      this.stagedAlien = Alien.stageAlien();\n    }\n    this.spaceDown = true;\n  }\n};\n\nCannon.prototype.onKeyUp = function(e) {\n  this.direction = null;\n  this.spaceDown = false;\n  if(e.keyCode === 32) Alien.fireCannon(this.angle, this.stagedAlien);\n};\n\n\nCannon.prototype.rotate = function() {\n  if(this.direction === \"right\") {\n    this.angle += DELTA;\n  }\n  if(this.direction === \"left\") {\n    this.angle -= DELTA;\n  }\n};\n\nmodule.exports = Cannon;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/cannon.js\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = {\n  RADIUS: 25,\n  DELTA: 0.05,\n  SPEED: 7,\n  POINTS: 10\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/constants.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":""}