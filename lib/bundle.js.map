{"version":3,"sources":["webpack:///webpack/bootstrap 48d266f9e3e3c2eebe69","webpack:///./lib/entry.js","webpack:///./lib/constants.js","webpack:///./lib/game.js","webpack:///./lib/brood.js","webpack:///./lib/alien.js","webpack:///./lib/util.js","webpack:///./lib/cannon.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;;AAEA;;AAEA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClCA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA0B,WAAW;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,4CAA2C,aAAa;AACxD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAkB,OAAO;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,iCAAgC,aAAa,UAAU,cAAc;AACrE;;AAEA;;;;;;;ACpIA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAoB,2BAA2B;AAC/C,iDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA0B;AAC1B;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;AACA;AACA,iBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;AACA;AACA,iBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;;AAGA;;;;;;;ACzVA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,WAAW;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAgB;;AAEhB;AACA;AACA;AACA,wBAAuB;AACvB;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,iBAAgB,cAAc;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA,IAAG;AACH;AACA;;;AAGA;;AAEA;;;;;;;ACxPA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA,IAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACtEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 48d266f9e3e3c2eebe69\n **/","const Constants = require(\"./constants\");\nconst Game = require(\"./game\");\n\nlet game = new Game();\n\ngame.setup();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/entry.js\n ** module id = 0\n ** module chunks = 0\n **/","var greenAlien = new Image();\ngreenAlien.src = \"assets/images/aliens/smiley_green_alien.svg\";\nvar blueAlien = new Image();\nblueAlien.src = \"assets/images/aliens/smiley_blue_alien.svg\";\nvar redAlien = new Image();\nredAlien.src = \"assets/images/aliens/smiley_red_alien.svg\";\nvar orangeAlien = new Image();\norangeAlien.src = \"assets/images/aliens/smiley_orange_alien.svg\";\nvar purpleAlien = new Image();\npurpleAlien.src = \"assets/images/aliens/smiley_purple_alien.svg\";\n\n\n\nmodule.exports = {\n  NUMROWS: 1,\n  LOSSHEIGHT: 640,\n  RADIUS: 50,\n  X_SPACING: 50 * Math.sqrt(3) / 2,\n  VERTICES: 6,\n  DELTA: 0.075,\n  SPEED: 10,\n  POINTS: 10,\n  COLORS: [\n      \"blue\",\n      \"red\",\n      \"yellow\"\n  ],\n  TYPES: [\n    greenAlien,\n    blueAlien,\n    purpleAlien,\n    redAlien,\n    orangeAlien\n  ]\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/constants.js\n ** module id = 1\n ** module chunks = 0\n **/","const Constants = require(\"./constants\");\nconst Brood = require(\"./brood.js\");\nconst Cannon = require(\"./cannon.js\");\n\nconst SPEED = Constants.SPEED;\nconst RADIUS = Constants.RADIUS;\n\nvar playFrame = $(\"#play\");\nlet scoreReport = document.getElementById('player-score');\nvar canvas = document.getElementById(\"brood-canvas\");\nvar ctx = canvas.getContext(\"2d\");\nvar gameInterval;\n\nconst Game = function(options) {\n  this.top = 0;\n  this.shotCount = 0;\n  this.score = 0;\n  this.topFlush = true;\n  this.brood = new Brood({game: this});\n  this.cannon = new Cannon();\n  // window.testAlien = this.brood.movingAliens[0];\n};\n\n// IS THIS STILL NEEDED?\nGame.reset = function() {\n  this.top = 0;\n  this.loss = false;\n  this.win = false;\n  initializeAliens();\n};\n\n//////// GAMEPLAY\n\nGame.prototype.step = function() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  this.drawCeiling();\n  // this.brood.renderAliens();\n  this.brood.stepAliens();\n  this.cannon.rotate();\n  this.cannon.draw();\n  if(this.brood.loss) {\n    this.end(\"You lose!\");\n  } else if(this.brood.win){\n    this.end(\"You win!\");\n  }\n};\n\nGame.prototype.updateScore = function() {\n  this.score += Constants.POINTS;\n  scoreReport.textContent = `Your score: ${ this.score }`;\n};\n\nGame.prototype.countShots = function() {\n  this.shotCount += 1;\n  // if(this.shotCount % 10 === 0) this.resetTop();\n};\n\nGame.prototype.resetTop = function() {\n  this.top += 2 * RADIUS;\n  this.brood.shiftAliens();\n};\n\nGame.prototype.drawCeiling = function() {\n  ctx.beginPath();\n  ctx.fillStyle = \"#d3d3d3\";\n  ctx.rect(0,0,canvas.width, this.top);\n  ctx.fill();\n  ctx.closePath();\n};\n\n//////// START/STOP PLAY METHODS\n\nGame.prototype.setup = function() {\n  $replay.remove();\n  gameInterval = setInterval(this.step.bind(this), 10);\n  var event = new CustomEvent('imagesLoaded');\n  var keydownEvent = document.addEventListener('keydown', this.onKeyDown.bind(this));\n  var keyupEvent = document.addEventListener('keyup', this.onKeyUp.bind(this));\n};\n\nGame.prototype.end = function(text) {\n  console.log(\"The end\");\n  document.removeEventListener('keydown', this.onKeyDown.bind(this));\n  document.removeEventListener('keyup', this.onKeyUp.bind(this));\n  clearInterval(gameInterval);\n  $replay.text(`${ text } Play again?`);\n  $replay.append('<i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>');\n  $replay.on(\"click\", \".fa-refresh\", playAgain);\n  playFrame.append($replay);\n};\n\nconst playAgain = function() {\n  let game = new Game();\n  game.setup();\n};\n\n//////// LISTENERS AND THEIR CALLBACKS\n\nGame.prototype.onKeyDown = function(e) {\n  // debugger\n  if(e.keyCode === 39) {\n    this.cannon.direction = \"right\";\n  } else if(e.keyCode === 37) {\n    this.cannon.direction = \"left\";\n  } else if(e.keyCode === 32) {\n    e.preventDefault();\n    if(!this.cannon.spaceDown) {\n      this.cannon.stagedAlien = this.brood.stageAlien();\n    }\n    this.cannon.spaceDown = true;\n  }\n};\n\nGame.prototype.onKeyUp = function(e) {\n  this.cannon.direction = null;\n  this.cannon.spaceDown = false;\n  if(e.keyCode === 32) this.fireCannon(this.cannon.angle, this.cannon.stagedAlien);\n};\n\nGame.prototype.fireCannon = function(angle, alien) {\n  alien.vel = [\n    SPEED * Math.sin(angle),\n    -SPEED * Math.cos(angle)\n  ];\n  alien.staged = false;\n  this.countShots();\n};\n\n\nconst $replay = $(`<div width=${canvas.width} height=${canvas.height} class='replay'>\n  </div>`);\n\nmodule.exports = Game;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/game.js\n ** module id = 2\n ** module chunks = 0\n **/","const Constants = require('./constants.js');\nconst Alien = require('./alien.js');\nconst Util = require('./util.js');\n\nvar canvas = document.getElementById(\"brood-canvas\");\nvar ctx = canvas.getContext(\"2d\");\n\nconst RADIUS = Constants.RADIUS;\nconst xSpacing = RADIUS * Math.sqrt(3) / 2;\nconst SPEED = Constants.SPEED;\n\nvar coolAlien = new Image();\ncoolAlien.src = \"assets/images/aliens/green/Smiley_green_alien_big_eyes.svg\";\n\nconst Brood = function(options) {\n  this.game = options.game;\n  this.aliens = initializeAliens(this.game);\n  this.movingAliens = {};\n  this.shotCount = 1;\n};\n\ninitializeAliens = function(game) {\n  let aliens = [];\n  for(let level = 0; level < Constants.NUMROWS; level++){\n    let pos = xSpacing + (level % 2) * xSpacing;//RADIUS + (level % 2) * RADIUS;\n    while(pos + xSpacing < canvas.width) {\n      let height = RADIUS + level * 2 * RADIUS;\n      let options = {\n        pos: [pos, height],\n        vel: [0,0],\n        color: Util.randomColor(),\n        type: Util.randomType(),\n        radius: RADIUS,\n        staged: false,\n        alive: true,\n        game: game\n      };\n\n      aliens.push(new Alien(options));\n      pos += 2 * xSpacing;//RADIUS * Math.cos(Math.PI / 3);\n    }\n  }\n  return aliens;\n};\n\n\nBrood.prototype.stageAlien = function(){\n  this.shotCount += 1;\n  if(this.shotCount % 10 === 0) this.resetTop();\n  let options = {\n    id: this.shotCount,\n    pos: [canvas.width/2, canvas.height - Constants.RADIUS],\n    vel: [0, 0],\n    color: Util.randomColor(),\n    type: Util.randomType(),\n    radius: RADIUS,\n    staged: true,\n    alive: true,\n    game: this.game\n  };\n  let newAlien = new Alien(options);\n  // this.aliens.push(newAlien);\n  // this.movingAliens.push(newAlien);\n  this.movingAliens[this.shotCount] = newAlien;\n  return newAlien;\n};\n\n/////////// TESTING NOT FOR USE YET\n\nBrood.prototype.stepAliens = function() {\n  this.moveAliens();\n  this.checkAllCollisions();\n  this.renderAllAliens();\n};\n\nBrood.prototype.moveAliens = function() {\n  for(let id in this.movingAliens){\n    let alien = this.movingAliens[id];\n    alien.move();\n  }\n};\n\nBrood.prototype.moveAlien = function(alien) {\n  let pos = alien.move();\n  pos = this.checkCeiling(pos, alien);\n  pos = this.checkForCollision(alien);\n  alien.pos = pos;\n};\n\nBrood.prototype.checkCeiling = function(pos, alien) {\n  if(pos[1] < this.game.top){\n    pos = this.fixToCeiling(pos[0]);\n  }\n  return pos;\n};\n\nBrood.prototype.checkForCollision = function(pos, alien) {\n  for(let i = 0; i < this.aliens.length; i++) {\n    if(\n      alien.alive &&\n      this.aliens[i].alive &&\n      alien !== this.aliens[i] &&\n      alien.collidingWith(this.aliens[i])\n    ) {\n      let angle = this.findAngle(alien, this.aliens[i]);\n      alien.setPosition(this.aliens[i], angle);\n      this.stop(alien);\n      this.markKills(alien);\n    }\n  }\n};\n\nBrood.prototype.renderAllAliens = function() {\n  this.renderMovingAliens();\n  this.renderAliens();\n};\n\nBrood.prototype.renderAliens = function() {\n  this.aliens.forEach(function(alien) {\n    alien.draw();\n  });\n};\n\nBrood.prototype.renderMovingAliens = function() {\n  for(let id in this.movingAliens) {\n    this.movingAliens[id].draw();\n  }\n};\n\nBrood.prototype.checkAllCollisions = function() {\n  let numberMovingAliens = Object.keys(this.movingAliens).length;\n  for(let id in this.movingAliens) {\n    this.checkAlienCollisions(this.movingAliens[id]);\n  }\n};\n\nBrood.prototype.checkAlienCollisions = function(alien) {\n  for(let i = 0; i < this.aliens.length; i++) {\n    if(\n      alien.alive &&\n      this.aliens[i].alive &&\n      alien !== this.aliens[i] &&\n      alien.collidingWith(this.aliens[i])\n    ) {\n      console.log(\"registering\");\n      let angle = this.findAngle(alien, this.aliens[i]);\n      alien.setPosition(this.aliens[i], angle);\n      this.stop(alien);\n      this.markKills(alien);\n    }\n  }\n};\n\nBrood.prototype.findAngle = function(alien, otherAlien) {\n  let angle = alien.angleWith(otherAlien);\n  let angles = Alien.sortedAngles(angle);\n  for(let i = 0; i < angles.length; i++) {\n    if(!this.isOccupied(alien, angles[i])){\n      angle = angles[i];\n      break;\n    }\n  }\n  // debugger\n  return angle;\n};\n\nBrood.prototype.isOccupied = function(alien, angle) {\n  // debugger\n  let pos = [\n    alien.pos[0] + 2 * RADIUS * Math.cos(angle),\n    alien.pos[1] + 2 * RADIUS * Math.sin(angle)\n  ];\n\n  for(let i = 0; i < this.aliens.length; i++) {\n    if(Util.inRange(pos, this.aliens[i].pos)){\n      // debugger\n      return true;\n    }\n  }\n  return false;\n};\n\nBrood.prototype.alienAt = function(pos) {\n  // debugger\n  for(let i = 0; i < this.aliens.length; i++) {\n    if(this.aliens[i].alive &&\n      Util.inRange(pos, this.aliens[i].pos)) {\n      return  true;\n    }\n  }\n  return false;\n};\n\nBrood.prototype.stop = function(alien){\n  alien.stop();\n  delete this.movingAliens[alien.id];\n  this.aliens.push(alien);\n};\n\n////////// UTILITY FUNCTIONS\n\nconst addNewNodes = function(oldNodes, newNodes) {\n  newNodes.forEach(function(node) {\n    if(!oldNodes.includes(node)) oldNodes.push(node);\n  });\n};\n\nBrood.prototype.resetTop = function() {\n  this.game.top += 2 * Constants.RADIUS;\n  this.shiftAliens();\n};\n\nBrood.prototype.shiftAliens = function() {\n  this.aliens.forEach(function(alien){\n    alien.pos[1] += 2 * RADIUS;\n  });\n};\n\n////////////// KILL FUNCTIONS\n\nBrood.prototype.markKills = function(alien) {\n  let neighbors = this.getSimilarCluster(alien);\n  // debugger\n  if(neighbors.length > 2){\n    this.killAliens(neighbors);\n    this.killUnattached();\n    // debugger\n    this.checkWin();\n  }\n};\n\nBrood.prototype.killUnattached = function() {\n  let attached = this.getAttached();\n  console.log(\"unattached triggers\");\n  this.aliens.forEach(function(alien){\n    if(\n      !attached.includes(alien) &&\n      !alien.staged\n    ) alien.kill();\n  });\n};\n\nBrood.prototype.killAliens = function(enemies) {\n  enemies.forEach(function(enemy) {\n    enemy.kill();\n  });\n};\n\n//// RECURSIVE & ITERATIVE CHECK FUNCTIONS / HELPERS\n\nBrood.prototype.livingAliens = function() {\n  for(let i in this.aliens) {\n    if(this.aliens[i].alive) return true;\n  }\n  return false;\n};\n\nBrood.prototype.checkWin = function() {\n  if(!this.livingAliens()) this.win = true;\n};\n\nBrood.prototype.checkLoss = function() {\n  this.aliens.forEach(function(alien) {\n    if(alien.alive &&\n      !alien.staged &&\n      alien.pos[1] > Constants.lossHeight) {\n      this.loss = true;\n    }\n  });\n};\n\nBrood.prototype.getTopRow = function() {\n  let topRow = this.aliens.reduce(function(result, alien) {\n    if(alien.pos[1] === (alien.game.top + RADIUS) &&\n      alien.alive) {\n      result.push(alien);\n    }\n    return result;\n  }, []);\n  // debugger\n  return topRow;\n};\n\nBrood.prototype.getAttached = function() {\n  let topAliens = this.getTopRow();\n  let attached = [];\n  topAliens.forEach(function(alien) {\n    if(attached.includes(alien)) return;\n    let cluster = this.getFullCluster(alien);\n    addNewNodes(attached, cluster);\n  }.bind(this));\n  return attached;\n};\n\nBrood.prototype.getSimilarNeighbors = function(alien) {\n  let similarNeighbors = [];\n  for(let j = 0; j < (this.aliens.length); j++) {\n    if(alien.neighboring(this.aliens[j]) &&\n      alien.type === this.aliens[j].type\n    ) {\n      similarNeighbors.push(this.aliens[j]);\n    }\n  }\n  return similarNeighbors;\n};\n\nBrood.prototype.getSimilarCluster = function(alien, nodeList) {\n  nodeList = nodeList || [];\n  if(!nodeList.includes(alien)) nodeList.push(alien);\n\n  this.getSimilarNeighbors(alien).forEach(function(neighbor) {\n    if(!nodeList.includes(neighbor)) {\n      let newList = this.getSimilarCluster(neighbor, nodeList);\n      return addNewNodes(nodeList, newList);\n    }\n  }.bind(this));\n\n  return nodeList;\n};\n\nBrood.prototype.getAllNeighbors = function(alien) {\n  let allNeighbors = [];\n  for(let j = 0; j < (this.aliens.length); j++) {\n    if(alien.neighboring(this.aliens[j])) {\n      allNeighbors.push(this.aliens[j]);\n    }\n  }\n  return allNeighbors;\n};\n\nBrood.prototype.getFullCluster = function(alien, nodeList) {\n  nodeList = nodeList || [];\n  if(!nodeList.includes(alien)) nodeList.push(alien);\n\n  this.getAllNeighbors(alien).forEach(function(neighbor) {\n    if(!nodeList.includes(neighbor) && neighbor.alive) {\n      let newList = this.getFullCluster(neighbor, nodeList);\n      return addNewNodes(nodeList, newList);\n    }\n  }.bind(this));\n\n  return nodeList;\n};\n\n\nmodule.exports = Brood;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/brood.js\n ** module id = 3\n ** module chunks = 0\n **/","const Constants = require('./constants.js');\nconst Util = require('./util.js');\nconst Game = require('./game.js');\nvar canvas = document.getElementById(\"brood-canvas\");\nvar ctx = canvas.getContext(\"2d\");\n\nconst RADIUS = Constants.RADIUS;\nconst SPEED = Constants.SPEED;\nconst XSPACE = Constants.X_SPACING;\n\nconst Alien = function(options) {\n  this.id = options.id;\n  this.color = options.color;\n  this.type = options.type;\n  this.radius = options.radius;\n  this.pos = options.pos;\n  this.vel = options.vel;\n  this.alive = true;\n  this.staged = options.staged;\n  this.game = options.game;\n};\n\n// INSTANCE METHODS\n\nconst polygon = function(context, x, y, radius, sides, startAngle, anticlockwise) {\n  if (sides < 3) return;\n  var a = (Math.PI * 2)/sides;\n  a = anticlockwise?-a:a;\n  context.save();\n  context.translate(x,y);\n  context.rotate(startAngle);\n  context.moveTo(radius,0);\n  for (var i = 1; i < sides; i++) {\n    context.lineTo(radius*Math.cos(a*i),radius*Math.sin(a*i));\n  }\n  ctx.stroke();\n  context.closePath();\n  context.restore();\n};\n\nAlien.prototype.draw = function() {\n  if(this.alive) {\n    // polygon(ctx, this.pos[0], this.pos[1], this.radius, 6, Math.PI/2);\n    // ctx.translate(-this.radius, -this.radius);\n    let scalingFactor = 1.5;\n    ctx.drawImage(\n      this.type,\n      this.pos[0]-this.radius / scalingFactor,\n      this.pos[1]-this.radius,\n      scalingFactor * this.radius,\n      1.25 * scalingFactor * this.radius\n    );\n    // ctx.translate(this.radius, this.radius);\n  }\n};\n\nAlien.prototype.move = function() {\n  if(!this.alive) return;\n  let newX = (this.pos[0] + this.vel[0]);\n  let newY = (this.pos[1] + this.vel[1]);\n\n  if(!this.bounded(newX)) {\n    newX -= this.vel[0] * 2;\n    this.vel[0] *= -1;\n  }\n\n  if(newY < this.game.top){\n    // debugger\n    [newX, newY] = this.fixToCeiling(newX);\n  }\n\n  this.pos = [newX, newY];\n  // this.draw();\n};\n\nAlien.prototype.bounded = function(x) {\n  let leftBound = x - RADIUS;\n  let rightBound = x + RADIUS;\n  if(rightBound > canvas.width || leftBound < 0) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nAlien.prototype.setPosition = function(alien, angle) {\n  let radius = this.radius * Math.sqrt(3);\n  let x = alien.pos[0] + radius * Math.cos(angle);\n  let y = alien.pos[1] + radius * Math.sin(angle);\n  this.pos = [x, y];\n};\n\nAlien.prototype.fixToCeiling = function(x) {\n  // debugger\n  this.game.brood.stop(this);\n  let xOffset = this.game.topFlush ? 0 : XSPACE;\n  let deltaX = (x + xOffset) % (2 * XSPACE);\n  let newX = x - deltaX + XSPACE;\n  let newY = this.game.top + RADIUS;\n  // Test if [newX, newY] is occupied\n  let direction;// = this.vel/Math.abs(this.vel);\n\n  // debugger\n  while(this.game.brood.alienAt([newX, newY])) {\n    direction = Math.sign(this.pos[0] - newX);\n    newX += 2 * XSPACE;// * direction;\n  }\n\n  // if it's occupied check right then check left\n\n\n  // const DIAM = 2 * XSPACE;\n  // let effectiveX = x - xOffset;\n  // let xBound = DIAM * Math.round((effectiveX)/(DIAM));\n  // let newX = Constants.X_SPACING + xBound;\n  // checkLoss();\n  return [newX, newY];\n};\n\nAlien.prototype.kill = function() {\n  this.alive = false;\n  this.game.updateScore();\n};\n\nAlien.prototype.touches = function(otherAlien) {\n  res = Alien.hexCompare(\n    this.pos,\n    otherAlien.pos,\n    2 * this.radius,\n    Math.PI / 4\n  );\n  return res;\n};\n\nAlien.prototype.stop = function() {\n  this.vel = [0,0];\n};\n\nAlien.prototype.neighboring = function(neighbor) {\n  res =(\n    this !== neighbor &&\n    this.touches(neighbor) &&\n    neighbor.alive\n  );\n  return res;\n};\n\n///////////////////// REFACTORING - NOT IN USE\n\nconst VERTICES = Constants.VERTICES;\n\nconst ANGLES = [];\nconst getAngles = function(){\n  for(let i = 0; i < VERTICES; i++) {\n    let angle = (i * Math.PI / 3 - Math.PI);\n    ANGLES.push(angle);\n  }\n};\ngetAngles();\n\nAlien.prototype.getVertices = function() {\n  return [\n    [this.pos[0], this.pos[1] + RADIUS],\n    [this.pos[0], this.pos[1] - RADIUS],\n    [this.pos[0] + RADIUS * Math.cos(Math.PI/6), this.pos[1] + RADIUS * Math.sin(Math.PI/6)],\n    [this.pos[0] + RADIUS * Math.cos(Math.PI/6), this.pos[1] - RADIUS * Math.sin(Math.PI/6)],\n    [this.pos[0] - RADIUS * Math.cos(Math.PI/6), this.pos[1] + RADIUS * Math.sin(Math.PI/6)],\n    [this.pos[0] - RADIUS * Math.cos(Math.PI/6), this.pos[1] - RADIUS * Math.sin(Math.PI/6)],\n  ];\n};\n\nAlien.prototype.inHexagon = function(pos) {\n  let [x, y] = this.pos;\n  let [a, b] = pos;\n  let radius = this.radius;\n\n  // x = a + ((x - a) * Math.cos(angle) - (y - b) * Math.sin(angle));\n  // y = b + ((y - b) * Math.cos(angle) + (x - a) * Math.sin(angle));\n  //\n  let res = (\n    x <= a + radius * Math.cos(Math.PI/6) &&\n    x >= a - radius * Math.cos(Math.PI/6) &&\n    y - (b + radius) <= (x - a) * Math.tan(Math.PI/6) &&\n    y - (b - radius) >= (x - a) * Math.tan(Math.PI/6) &&\n    y - (b + radius) <= -(x - a) * Math.tan(Math.PI/6) &&\n    y - (b - radius) >= -(x - a) * Math.tan(Math.PI/6)\n  );\n  return res;\n};\n\nAlien.hexCompare = function(posA, posB, radius, angle = 0) {\n  let [x, y] = posA;\n  let [a, b] = posB;\n\n  // x = a + ((x - a) * Math.cos(angle) - (y - b) * Math.sin(angle));\n  // y = b + ((y - b) * Math.cos(angle) + (x - a) * Math.sin(angle));\n  // debugger\n  let res = (\n    y <= b + radius * Math.cos(Math.PI/6) &&\n    y >= b - radius * Math.cos(Math.PI/6) &&\n    x - (a + radius) <= (y - b) * Math.tan(Math.PI/6) &&\n    x - (a - radius) >= (y - b) * Math.tan(Math.PI/6) &&\n    x - (a + radius) <= -(y - b) * Math.tan(Math.PI/6) &&\n    x - (a - radius) >= -(y - b) * Math.tan(Math.PI/6)\n  );\n  return res;\n};\n\n// Alien.hexCompare = function(posA, posB, radius, angle = 0) {\n//\n// };\n\n// Called from perspective of moving alien\nAlien.prototype.angleWith = function(otherAlien) {\n  let y = this.pos[1] - otherAlien.pos[1];\n  let x = this.pos[0] - otherAlien.pos[0];\n  // debugger\n  return Math.atan2(y,x);\n};\n\nAlien.prototype.collidingWith = function(otherAlien) {\n  console.log(\"colliding?\");\n  let vertices = this.getVertices();\n  for(let i = 0; i < vertices.length; i++) {\n    if(otherAlien.inHexagon(vertices[i])){\n      return true;\n    }\n  }\n  return false;\n};\n\n// MAYBE A UTILITY? Returns sorted copy of ANGLES by their difference with input angle\nAlien.sortedAngles = function(angle) {\n  let angles = ANGLES.slice();\n  // debugger\n  angles = angles.sort(function(a, b) {\n    if(Math.abs(a - angle) < Math.abs(b - angle)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return angles;\n};\n\n\n//////////////////////////////\n\nmodule.exports = Alien;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/alien.js\n ** module id = 4\n ** module chunks = 0\n **/","const Constants = require('./constants');\n\nconst RADIUS = Constants.RADIUS;\nconst COLORS = Constants.COLORS;\n\nvar greenAlien = new Image();\ngreenAlien.src = \"assets/images/aliens/smiley_green_alien.svg\";\nvar blueAlien = new Image();\nblueAlien.src = \"assets/images/aliens/smiley_blue_alien.svg\";\nvar redAlien = new Image();\nredAlien.src = \"assets/images/aliens/smiley_red_alien.svg\";\nvar orangeAlien = new Image();\norangeAlien.src = \"assets/images/aliens/smiley_orange_alien.svg\";\nvar purpleAlien = new Image();\npurpleAlien.src = \"assets/images/aliens/smiley_purple_alien.svg\";\n\nTYPES = [\n  greenAlien,\n  blueAlien,\n  purpleAlien,\n  redAlien,\n  orangeAlien\n];\n\nmodule.exports = {\n  randomColor: function() {\n    return COLORS[Math.floor(Math.random() * COLORS.length)];\n  },\n\n  randomType: function() {\n    return TYPES[Math.floor(Math.random() * TYPES.length)];\n  },\n\n  randomVelocity: function() {\n    let x = Math.random() * 2 - 1;\n    let y = Math.random() * 2 - 1;\n    let speed = Math.random();\n    x = x / Math.sqrt(x * x + y * y);\n    y = y / Math.sqrt(x * x + y * y);\n    return [x, y];\n  },\n\n  getVelocity: function(vector){\n    let x = vector[0];\n    let y = vector[1];\n    let result = [\n      x/Math.sqrt(x * x + y * y),\n      y/Math.sqrt(x * x + y * y)\n    ];\n    return result;\n  },\n\n  xDist: function(first, second) {\n    return Math.abs(first[0] - second[0]);\n  },\n\n  yDist: function(first, second) {\n    return Math.abs(first[1] - second[1]);\n  },\n\n  onCanvas: function(pos) {\n    return ( pos[0] > 0 || pos[0] < canvas.width ? true : false);\n  },\n\n  inRange: function(posA, posB) {\n    return (\n      this.xDist(posA, posB) < Constants.RADIUS * 0.01 &&\n      this.yDist(posA, posB) < Constants.RADIUS * 0.01\n    );\n  }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/util.js\n ** module id = 5\n ** module chunks = 0\n **/","const Constants = require('./constants.js');\nconst Brood = require(\"./brood.js\");\nconst Game = require(\"./game.js\");\n\nconst canvas = document.getElementById(\"brood-canvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst img = new Image();\nimg.src = 'assets/images/cannon.png';\nlet DELTA = Constants.DELTA;\nlet RADIUS = Constants.RADIUS;\n\nconst Cannon = function() {\n  this.color = \"#d3d3d3\";\n  this.length = canvas.height/5;\n  this.width = RADIUS * 2.5;\n  this.angle = 0;\n  this.spaceDown = false;\n  this.stagedAlien = null;\n  this.direction = null;\n};\n\nconst drawCannon = function() {\n  ctx.translate(canvas.width/2, canvas.height);\n  ctx.translate(-canvas.width/2, -canvas.height);\n};\n\nCannon.prototype.draw = function() {\n\n  ctx.translate(canvas.width/2, canvas.height);\n  ctx.rotate(this.angle);\n  ctx.fillStyle = this.color;\n\n  ctx.beginPath();\n  ctx.rect(-this.width/2, -this.length * 3 / 2, this.width, this.length);\n  ctx.fill();\n  ctx.closePath();\n\n  ctx.beginPath();\n  ctx.arc(0, 0, this.length/2, 0, 2 * Math.PI, false);\n  ctx.strokeStyle = this.color;\n  ctx.lineWidth = 10;\n  ctx.stroke();\n  ctx.closePath();\n\n  ctx.rotate(-this.angle);\n  ctx.translate(-canvas.width/2, -canvas.height);\n\n};\n\nCannon.prototype.rotate = function() {\n  if(this.direction === \"right\" &&\n    this.angle < 5*Math.PI/12\n  ) {\n    this.angle += DELTA;\n  }\n  if(this.direction === \"left\" &&\n    this.angle > - 5*Math.PI/12\n) {\n    this.angle -= DELTA;\n  }\n};\n\nmodule.exports = Cannon;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/cannon.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}